{"version":3,"sources":["scripts/main.js"],"names":["newGameField","button","document","querySelector","messageStart","messageWin","messageLose","gameScore","fieldRows","querySelectorAll","size","score","isWin","gameField","reset","classList","contains","add","addNumber","findEmptyCell","randomY","randomX","Math","random","move","e","key","left","right","down","up","row","column","render","remove","isPosibleToMove","removeEventListener","reverseRows","forEach","reverse","checkRows","map","newRow","filter","cell","index","splice","concat","Array","length","fill","transposeGameField","emptyCells","rowIndex","columnIndex","push","floor","element","children","textContent","className","_","colIndex","checkColumns","i","some","j","addEventListener","replace","innerText"],"mappings":";AAAA,aA6NC,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EA3ND,IASIA,EATEC,EAASC,SAASC,cAAc,UAChCC,EAAeF,SAASC,cAAc,kBACtCE,EAAaH,SAASC,cAAc,gBACpCG,EAAcJ,SAASC,cAAc,iBACrCI,EAAYL,SAASC,cAAc,eACnCK,EAAYN,SAASO,iBAAiB,cACtCC,EAAO,EACTC,EAAQ,EACRC,GAAQ,EAERC,EAAY,CACd,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAmBZ,SAASC,IACPH,EAAQ,EAERE,EAAY,CACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGPP,EAAYS,UAAUC,SAAS,WAClCV,EAAYS,UAAUE,IAAI,UAGvBZ,EAAWU,UAAUC,SAAS,WACjCX,EAAWU,UAAUE,IAAI,UAI7B,SAASC,IACoBC,IADR,EAAA,EACQA,IADR,GACZC,EADY,EAAA,GACHC,EADG,EAAA,GAGnBR,EAAUO,GAASC,GAAWC,KAAKC,SAAW,GAAM,EAAI,EAG1D,SAASC,EAAKC,GAGJA,OAFRzB,EAAea,EAEPY,EAAEC,KACH,IAAA,YACHC,IACA,MAEG,IAAA,aACHC,IACA,MAEG,IAAA,YACHC,IACA,MAEG,IAAA,UACHC,IACA,MAEF,QACE,OAGC,IAAA,IAAIC,EAAM,EAAGA,EAAMrB,EAAMqB,IACvB,IAAA,IAAIC,EAAS,EAAGA,EAAStB,EAAMsB,IAC9BhC,EAAa+B,GAAKC,KAAYnB,EAAUkB,GAAKC,KAC/CnB,EAAYb,EACZkB,IACAe,KAKFrB,GACFP,EAAWU,UAAUmB,OAAO,UAGzBC,MACH7B,EAAYS,UAAUmB,OAAO,UAC7BhC,SAASkC,oBAAoB,UAAWZ,IAI5C,SAASa,IACPrC,EAAasC,QAAQ,SAAAP,GAAOA,OAAAA,EAAIQ,YAGlC,SAASZ,IACFa,MAILxC,EAAeA,EAAayC,IAAI,SAAAV,GACxBW,IAAAA,EAASX,EAAIY,OAAO,SAAAC,GAAQA,OAAS,IAATA,IAc3BF,OAZPA,EAAOJ,QAAQ,SAACM,EAAMC,GAChBD,IAASF,EAAOG,EAAQ,KAC1BH,EAAOG,IAAU,EACjBH,EAAOI,OAAOD,EAAQ,EAAG,GACzBlC,GAAS+B,EAAOG,GAEM,OAAlBH,EAAOG,KACTjC,GAAQ,MAKP8B,EAAOK,OAAOC,MAAMtC,EAAOgC,EAAOO,QAAQC,KAAK,OAI1D,SAAStB,IACFY,MAILH,IACAV,IACAU,KAGF,SAASR,IACPsB,IACAvB,IACAuB,IAGF,SAASrB,IACPqB,IACAxB,IACAwB,IAGF,SAAShC,IACDiC,IAAAA,EAAa,GAUZA,OARPvC,EAAUyB,QAAQ,SAACP,EAAKsB,GACtBtB,EAAIO,QAAQ,SAACM,EAAMU,GACJ,IAATV,GACFQ,EAAWG,KAAK,CAACF,EAAUC,QAK1BF,EAAW9B,KAAKkC,MAAMlC,KAAKC,SAAW6B,EAAWH,SAG1D,SAAShB,IACF,IAAA,IAAIF,EAAM,EAAGA,EAAMrB,EAAMqB,IACvB,IAAA,IAAIC,EAAS,EAAGA,EAAStB,EAAMsB,IAAU,CACtCyB,IAAAA,EAAUjD,EAAUuB,GAAK2B,SAAS1B,GAClCY,EAAO/B,EAAUkB,GAAKC,GAEf,IAATY,GACFa,EAAQE,YAAc,GACtBF,EAAQG,UAAY,eAEpBH,EAAQE,YAAcf,EACtBa,EAAQG,UAAsChB,0BAAAA,OAAAA,IAKpDrC,EAAUoD,YAAchD,EAG1B,SAASwC,IACPnD,EAAeA,EAAa,GACzByC,IAAI,SAACoB,EAAGC,GAAa9D,OAAAA,EAAayC,IAAI,SAAAV,GAAOA,OAAAA,EAAI+B,OAGtD,SAAS3B,IACHK,QAAAA,MAIJW,IAEOY,KAGT,SAASvB,IACF,IAAIwB,IAAAA,EAAAA,SAAAA,GACHhE,GAAAA,EAAagE,GAAGC,KAAK,SAAArB,GAAQA,OAAS,IAATA,KAC5B5C,EAAagE,GAAGC,KAAK,SAACrB,EAAMsB,GAAMtB,OAAAA,IAAS5C,EAAagE,GAAGE,EAAI,KAClE,MAAA,CAAO,GAAA,IAHFF,EAAI,EAAGA,EAAItD,EAAMsD,IAAK,CAAtBA,IAAAA,EAAAA,EAAAA,GAAsB,GAAA,WAAA,EAAA,GAAA,OAAA,EAAA,EAOxB,OAAA,EAGT,SAASD,IACF,IAAIC,IAAAA,EAAAA,SAAAA,GACHhE,GAAAA,EAAagE,GAAGC,KAAK,SAACrB,EAAMsB,GAAMtB,OAAAA,IAAS5C,EAAagE,GAAGE,EAAI,KACjE,MAAA,CAAO,GAAA,IAFFF,EAAI,EAAGA,EAAItD,EAAMsD,IAAK,CAAtBA,IAAAA,EAAAA,EAAAA,GAAsB,GAAA,WAAA,EAAA,GAAA,OAAA,EAAA,EAMxB,OAAA,EAzMT/D,EAAOkE,iBAAiB,QAAS,SAAA1C,GAC/BvB,SAASiE,iBAAiB,UAAW3C,GAEjCvB,EAAOc,UAAUC,SAAS,UAC5Bf,EAAOc,UAAUqD,QAAQ,QAAS,WAClCnE,EAAOoE,UAAY,UACnBjE,EAAaW,UAAUE,IAAI,YAE3BL,GAAQ,EACRE,KAGFI,IACAe","file":"main.b6eaf900.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst fieldRows = document.querySelectorAll('.field-row');\nconst size = 4;\nlet score = 0;\nlet isWin = false;\nlet newGameField;\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nbutton.addEventListener('click', e => {\n  document.addEventListener('keydown', move);\n\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    isWin = false;\n    reset();\n  }\n\n  addNumber();\n  render();\n});\n\nfunction reset() {\n  score = 0;\n\n  gameField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  if (!messageLose.classList.contains('hidden')) {\n    messageLose.classList.add('hidden');\n  }\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n  }\n};\n\nfunction addNumber() {\n  const [randomY, randomX] = findEmptyCell();\n\n  gameField[randomY][randomX] = Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction move(e) {\n  newGameField = gameField;\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      left();\n      break;\n\n    case 'ArrowRight':\n      right();\n      break;\n\n    case 'ArrowDown':\n      down();\n      break;\n\n    case 'ArrowUp':\n      up();\n      break;\n\n    default:\n      return;\n  }\n\n  for (let row = 0; row < size; row++) {\n    for (let column = 0; column < size; column++) {\n      if (newGameField[row][column] !== gameField[row][column]) {\n        gameField = newGameField;\n        addNumber();\n        render();\n      }\n    }\n  }\n\n  if (isWin) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (!isPosibleToMove()) {\n    messageLose.classList.remove('hidden');\n    document.removeEventListener('keydown', move);\n  }\n}\n\nfunction reverseRows() {\n  newGameField.forEach(row => row.reverse());\n}\n\nfunction left() {\n  if (!checkRows()) {\n    return;\n  }\n\n  newGameField = newGameField.map(row => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, index) => {\n      if (cell === newRow[index + 1]) {\n        newRow[index] *= 2;\n        newRow.splice(index + 1, 1);\n        score += newRow[index];\n\n        if (newRow[index] === 2048) {\n          isWin = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(size - newRow.length).fill(0));\n  });\n}\n\nfunction right() {\n  if (!checkRows()) {\n    return;\n  }\n\n  reverseRows();\n  left();\n  reverseRows();\n}\n\nfunction down() {\n  transposeGameField();\n  right();\n  transposeGameField();\n}\n\nfunction up() {\n  transposeGameField();\n  left();\n  transposeGameField();\n}\n\nfunction findEmptyCell() {\n  const emptyCells = [];\n\n  gameField.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\n\nfunction render() {\n  for (let row = 0; row < size; row++) {\n    for (let column = 0; column < size; column++) {\n      const element = fieldRows[row].children[column];\n      const cell = gameField[row][column];\n\n      if (cell === 0) {\n        element.textContent = '';\n        element.className = 'field-cell';\n      } else {\n        element.textContent = cell;\n        element.className = `field-cell field-cell--${cell}`;\n      }\n    };\n  };\n\n  gameScore.textContent = score;\n}\n\nfunction transposeGameField() {\n  newGameField = newGameField[0]\n    .map((_, colIndex) => newGameField.map(row => row[colIndex]));\n}\n\nfunction isPosibleToMove() {\n  if (checkRows()) {\n    return true;\n  }\n\n  transposeGameField();\n\n  return checkColumns();\n}\n\nfunction checkRows() {\n  for (let i = 0; i < size; i++) {\n    if (newGameField[i].some(cell => cell === 0)\n      || newGameField[i].some((cell, j) => cell === newGameField[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction checkColumns() {\n  for (let i = 0; i < size; i++) {\n    if (newGameField[i].some((cell, j) => cell === newGameField[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]}